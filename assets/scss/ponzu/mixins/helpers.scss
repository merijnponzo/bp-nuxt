//shadow
@mixin shadow() {
	box-shadow:5px 5px 5px rgba(0, 0, 0, 0.1);
}
//shadow top
@mixin shadowtop() {
	box-shadow:5px -5px 5px rgba(0, 0, 0, 0.1);
}
@mixin shadowleft() {
	box-shadow:-5px 5px 5px rgba(0, 0, 0, 0.1);
}


//no selection
@mixin noselect(){
  -webkit-touch-callout: none;
    -webkit-user-select: none;
     -khtml-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
}
//mobile first, vertical layout
@function columnCalc($count){
  @return percentage(($count/12)+0.0000009);
}

@mixin border-bottoms($margin-top : 3px, $border-width : 2px){
  &:after{
    content:"";
    display:block;
    border-bottom:$border-width solid black;
    width:0px;
    transition:0.3s ease all;
    margin-top:$margin-top;
  }
  &:hover:after{
    width:100%;
  }
}


//create the columns
@mixin createColumns($classname) {


  $grid-collection: (10,9,8,7,6,5,4,3,2);

  @each $i in $grid-collection {
      $col : 12 - $i;
      &.#{$classname}-#{$col}{
          //remove default gutter
          margin-left:var(--grid-gutter);
          margin-right:var(--grid-gutter);
          width: calc((#{columnCalc(12 - $i)}) -  (var(--grid-gutter) *2));
          //gutter from calc
      }
  }
  &.#{$classname}-12{
    margin-left:var(--grid-gutter);
    margin-right:var(--grid-gutter);
    width:calc(100% -  (var(--grid-gutter) ));
  }
}

@mixin singleColumn($classname){
  #{$classname}{
    margin-left:var(--grid-gutter);
    margin-right:var(--grid-gutter);
    width:calc(100% -  (var(--grid-gutter) ));
  }
}

@mixin gridGutter($classname){
  @for $i from 0 through 10 {
    //overrulle chapter
    main{
      .gut--#{$classname}#{$i}{
      --grid-gutter:calc((#{$i}rem) * var(--space-factor));
      }
    }
  }
}
@function rem($size) {
  $remSize: $size / 16px;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

@mixin paddings($classname){
  @for $i from 0 through 10 {
    //overrulle chapter
    main{
      .pad--#{$classname}#{$i}{
        --box-pad:calc((#{$i}rem) * var(--space-factor));
      }
    }
  }
}



@mixin typoElements($property1,$value1,$classname,$property2:0,$value2:0){
  $typo-collection: ('h1','h2','h3','h4','h5','h6','p');
  //without classname
  @each $i in $typo-collection {
    #{$i}#{$classname}{
      #{$property1}:#{$value1};
      @if $property2{
        #{$property2}:#{$value2};
      }
    }
  }
}

//gradient
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }
}

@mixin get-color-yiq($background) {
  $r: red($background);
  $g: green($background);
  $b: blue($background);
  
  $yiq: (($r*299) + ($g*587) + ($b*114))/1000;
  
  @if ($yiq >= 128) {
    color:$color-bread;
  }
  @else {
    color:$color-default;
  }
}
@mixin get-color-yiq-border($background) {
  $r: red($background);
  $g: green($background);
  $b: blue($background);
  
  $yiq: (($r*299) + ($g*587) + ($b*114))/1000;
  
  @if ($yiq >= 128) {
    border-color:$color-bread;
  }
  @else {
    border-color:$color-default;
  }
}

@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

@function legacy-direction($value) {

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  @return 90deg - $value;
}

// https://dev.to/meduzen/write-css-variables-faster-in-scss-1mon
@function v($var) {
  @return var(--#{$var});
}


@function fontVar($font-type) {
    @each $name, $fontsize, $scalefactor, $classname, $cssvar  in $font-types {
      @if $name == $font-type {
        @return var(--#{$cssvar});
      }
    }
}


@mixin placeHolders($color, $opacity){
  ::-webkit-input-placeholder { /* Edge */
    color:$color;
    opacity: $opacity;
    transition: 0.5s ease all;
  }
  :-ms-input-placeholder { /* Internet Explorer 10-11 */
    color:$color;
    opacity: $opacity;
    transition: 0.5s ease all;
  }
  ::placeholder {
    color:$color;
    opacity: $opacity;
    transition: 0.5s ease all;
  }
}


@mixin clearfix() {
	*zoom: 1;

	&::before,
	&::after {
		content: ' ';
		display: table;
	}

	&::after {
		clear: both;
	}
}


